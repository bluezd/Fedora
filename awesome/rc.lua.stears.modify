-- Config file for Awesome 3.4.10 (by bluezd)
-- DO NOT use this as a stand-in blob; always change absolute paths and system variables as necessary.

-- REQUIRED LIBRARIES
-- Standard awesome library
	require("awful")
	require("awful.autofocus")
	require("awful.rules")
-- Widget and layout library
	require("vicious") 
-- Theme handling library
	require("beautiful")
-- Notification library
	require("naughty")
-- Drop-in terminal
	require("scratch")
-- Expose feature
	require("revelation")



-- {{{ VARIABLE DEFINITIONS
-- Themes define colours, icons, and wallpapers
beautiful.init("/home/bluezd/.config/awesome/themes/stears/theme.lua") 
-- theme.wallpaper_cmd = { "/usr/bin/nitrogen --restore" }
awesome.font = ("anorexia 10")


-- This is used later as the default terminal and editor to run.
terminal = "urxvt256c"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.fair,
    awful.layout.suit.magnifier,
}
-- }}}

-- Mouse Cursor
mymousefinder = awful.mouse.finder()
awful.util.spawn_with_shell("xsetroot -cursor_name left_ptr")


-- {{{ TAGS
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    tags[s] = awful.tag({ "♨", "⌨", "⚡", "✉", "☕", "❁", "☃", "☄", "⚢" }, s, layouts[1])
end

-- }}}                          

-- {{{ WIBOX

-- Separator/Spacer icons
	separator = widget({ type = "textbox", align = "left"})
	separator.text = '<span color="#A9D7F2"> || </span>'
	space = widget({ type = "textbox" })
	space.text = "  "
	
-- Status Labels
	c1 = widget({ type = "textbox" })
	c1.text = "(1)"
	c2 = widget({ type = "textbox" })
	c2.text = "(2)"
	rlabel = widget({ type = "textbox" })
	rlabel.text = "Root:"
	hlabel = widget({ type = "textbox" })
	hlabel.text = "Home:"

-- Awesome Icon (just for looks)
aicon = widget({ type = "imagebox" })
aicon.image = image(beautiful.awesome_icon)

-- VICIOUS WIDGETS

-- OS info
	sys = widget({ type= "textbox" })
	vicious.register(sys, vicious.widgets.os, "$1 $2")
	
-- Pacman updates
	-- Widget
	pacup = widget({ type = "textbox" })
	vicious.register(pacup, vicious.widgets.pkg, "$1", 1801, "Arch")
	-- Icon
	picon = widget({ type = "imagebox" })
	picon.image = image(beautiful.widget_pacnew)

-- Gmail updates
	-- Widget
	gmail = widget({ type = "textbox" })
	vicious.register(gmail, vicious.widgets.gmail, "${count}", 61)
	-- Icon
	gmicon = widget({ type = "imagebox" })
	gmicon.image = image(beautiful.widget_mailnew)
	
-- {{{ CPU 
	-- Core Temp
	tempwidget = widget({ type = "textbox" })
	vicious.register(tempwidget, vicious.widgets.thermal, "$1 C", 5, "thermal_zone0")
	-- Icon
	tempicon = widget({type = "imagebox" })
	tempicon.image = image(beautiful.widget_temp)

-- Readout
	-- Icon
	cpuicon = widget({ type = "imagebox" })
	cpuicon.image = image(beautiful.widget_cpu)
	-- Percentage
	cpu1 = widget({ type = "textbox" })
	vicious.register(cpu1, vicious.widgets.cpu, "(1): $1%")
	cpu2 = widget ({ type = "textbox" })
	vicious.register(cpu2, vicious.widgets.cpu, "(2): $2%")
	-- Meter
	cpubar = awful.widget.progressbar()
	cpubar:set_width(50)
	cpubar:set_height(8)
	cpubar:set_vertical(false)
	cpubar:set_background_color("#3F3F3F")
	cpubar:set_color(beautiful.bg_urgent )
	vicious.register(cpubar, vicious.widgets.cpu, "$1", 7)

	cpubar2 = awful.widget.progressbar()
	cpubar2:set_width(50)
	cpubar2:set_height(8)
	cpubar2:set_vertical(false)
	cpubar2:set_background_color("#3F3F3F")
	cpubar2:set_color(beautiful.bg_urgent )
	vicious.register(cpubar2, vicious.widgets.cpu, "$2", 7)
	-- Align progressbars
	awful.widget.layout.margins[cpubar.widget] = { top = 2 }
	awful.widget.layout.margins[cpubar2.widget] = { top = 2 }
	-- Frequency
	freq1 = widget({ type = "textbox" })
	vicious.register(freq1, vicious.widgets.cpufreq, "$2 Ghz", 9, "cpu0")
	freq2 = widget({ type = "textbox" })
	vicious.register(freq2, vicious.widgets.cpufreq, "$2 Ghz", 9, "cpu1")
	-- Cache that shit
	vicious.cache(vicious.widgets.cpu)

--- }}}    

-- {{{ Battery Charge
	--Icon
	baticon = widget({type = "imagebox" })
	baticon.image = image(beautiful.widget_batmed)
	-- Percentage
	battpct = widget({ type = "textbox", align = "right" })
	vicious.register(battpct, vicious.widgets.bat, "$3", 61, "BAT0")
	-- Meter
	battbar = awful.widget.progressbar()
	battbar:set_width(50)
	battbar:set_height(8)
	battbar:set_vertical(false)
	battbar:set_background_color("#3F3F3F")
	battbar:set_border_color(beautiful.bg_focus )
	battbar:set_color(beautiful.bg_urgent )
	vicious.register(battbar, vicious.widgets.bat, "$2", 61, "BAT0")
	-- Align progressbar
	awful.widget.layout.margins[battbar.widget] = { top = 2 }
	

-- {{{ Mem Usage
	-- Icon
	memicon = ({type = imagebox})
	memicon.image = image(beautiful.widget_mem)
	-- Percentage
	mempct = widget({ type= "textbox", align = "left"})
	vicious.register(mempct, vicious.widgets.mem, "$1%", 13)
	-- Meter
	membar = awful.widget.progressbar()
	membar:set_width(50)
	membar:set_height(8)
	membar:set_vertical(false)
	membar:set_background_color("#3F3F3F")
	membar:set_color(beautiful.bg_urgent)
	vicious.register(membar, vicious.widgets.mem, "$1", 13)
	-- Megs used
	memwidget = widget({ type= "textbox", align = "left"})
	vicious.register(memwidget, vicious.widgets.mem, "$2Mb", 5)
	-- Align progressbar
	awful.widget.layout.margins[membar.widget] = { top = 2 }
	-- Cache that shit
	vicious.cache(vicious.widgets.mem)
	
-- }}}

-- {{{ Filesystem info
	-- Icons
	fsicon = widget({ type = "imagebox" })
	fsicon.image = image(beautiful.widget_fs)
	
	-- Remaining
	fsh = widget({ type = "textbox" })
	vicious.register(fsh, vicious.widgets.fs, "${/home avail_gb} GB", 599)
	fsr = widget({ type = "textbox" })
	vicious.register(fsr, vicious.widgets.fs, "${/ avail_gb} GB", 599)
	
	-- Meter
	fshbar = awful.widget.progressbar()
	fshbar:set_width(50)
	fshbar:set_height(8)
	fshbar:set_vertical(false)
	fshbar:set_background_color("#3F3F3F")
	fshbar:set_color(beautiful.bg_urgent )
	vicious.register(fshbar, vicious.widgets.fs, "${/home used_p}", 1501)

	fsrbar = awful.widget.progressbar()
	fsrbar:set_width(50)
	fsrbar:set_height(8)
	fsrbar:set_vertical(false)
	fsrbar:set_background_color("#3F3F3F")
	fsrbar:set_color(beautiful.bg_urgent )
	vicious.register(fsrbar, vicious.widgets.fs, "${/home used_p}", 1501)
	-- Align progressbars
	awful.widget.layout.margins[fshbar.widget] = { top = 2 }
	awful.widget.layout.margins[fsrbar.widget] = { top = 2 }
	-- Cache that shit
	vicious.cache(vicious.widgets.fs)

-- }}}

-- {{{ MPD Readout
	-- Icon
	mpdicon = widget({type = "imagebox" })
	mpdicon.image = image(beautiful.widget_mpd)
	-- Display
	mpdwidget = widget({ type = "textbox", align = "left" })
	vicious.register(mpdwidget, vicious.widgets.mpd,
		function (widget, args)
			if args["{state}"] == "Stop" then 
				return " - "
			else 
				return args["{Artist}"]..' - '.. args["{Title}"]
			end
		end, 10)
-- }}}


-- }}}

-- Create a textclock widget
	mytextclock = awful.widget.textclock({ align = "right" }, "%a %b %d - %I:%M", 59)



-- {{{ Top panel widgets

	-- Volume Indicator
	-- Icon
	volicon = widget({ type = "imagebox" })
	volicon.image = image(beautiful.widget_vol)
	-- Scale
	volwidget = widget({ type = "textbox", align = "right" })
	vicious.register(volwidget, vicious.widgets.volume, "$1", 1, "Master")
	-- Wifi rate
	wifi = widget({ type = "textbox" })
	vicious.register(wifi, vicious.widgets.wifi, "${link}", 121, "wlan0")
	wicon = widget({ type = "imagebox" })
	wicon.image = image(beautiful.widget_wifi)

-- Create a systray
	mysystray = widget({ type = "systray", align = "right" })

-- }}}



-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))
                                          
                                          

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the top wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s, height=14 })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            aicon, space, mytaglist[s], space, mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        
        mylayoutbox[s], separator, mytextclock, separator, mysystray, separator, wifi, space, wicon, separator, 
        volwidget, space, volicon, separator, mytasklist[s],
        
        layout = awful.widget.layout.horizontal.rightleft
    }
    -- Create the bottom wibox
     mywibox[s] = awful.wibox({ position = "bottom", screen = s, height=14 })
      mywibox[s].widgets = {
        {
            sys, space, separator, space, picon, space, pacup, space, separator, space, gmicon, space, gmail, 
            space, separator, space, tempicon, space, tempwidget, space, separator, 
            space, c1, space, cpuicon, space, cpubar, space, freq1, space, separator, space, c2, space, 
            cpuicon, space, cpubar2, space, freq2, space, separator, space, 
            space, baticon, space, battbar, space, battpct, space, separator, space, memicon, space, 
            mempct, space, membar, space, memwidget, space, separator, space, fsicon, space, rlabel, space, fsrbar, 
            space, fsr, space, separator, space, fsicon, space, hlabel, space, fshbar, space, fsh, space, 
            separator, space, mpdicon, space, mpdwidget,
            
            layout = awful.widget.layout.horizontal.leftright
        },
        layout = awful.widget.layout.horizontal.rightleft
        
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({}, "Menu", function () mymainmenu:show({keygrabber=true}) end),
    awful.key({ modkey }, "b", function ()
    mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible
end),
	-- Volume Control
    awful.key({ }, "XF86AudioRaiseVolume",    function () awful.util.spawn("amixer set Master 2+") end),
    awful.key({ }, "XF86AudioLowerVolume",    function () awful.util.spawn("amixer set Master 2-") end),
    -- Power Button
    awful.key({ }, "XF86PowerOff",    function () awful.util.spawn("obshutdown") end),
	-- Brightness Control
    awful.key({modkey }, "F6",    function () awful.util.spawn("xbacklight -dec 50") end),
    awful.key({modkey }, "F7",    function () awful.util.spawn("xbacklight -inc 50") end),
	-- Dmenu
    awful.key({modkey }, "space", function()
    awful.util.spawn_with_shell( "exe=`dmenu_path | dmenu -p 'Arch Linux' -nf '#4F919F' -nb '#01253D' -sf '#E60009' -sb '#4F919F'` && exec $exe")
	-- Mouse Finder  
    awful.key({modkey, "Shift"}, "m", awful.mouse.finder)
end),
	-- Lock Screen
	awful.key({modkey }, "F1",    function () awful.util.spawn("slimlock") end),
	-- Turn off touchpad
	awful.key({modkey, "Shift" }, "x",    function () awful.util.spawn("touchoff") end),
	-- Revalation
	awful.key({ modkey }, "e",  revelation.revelation),
	-- Drop-down terminal
	awful.key({}, "F12", function () scratch.drop("terminator", "top", "center", 1, .70) end),
	-- Print Screen
	 awful.key({ }, "Print", function () awful.util.spawn("scrot -e 'mv $f ~/screenshots/ 2>/dev/null'") end),
    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, ",", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, 	      }, ".", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey, },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey			  }, "F4",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- Set client rules (tags and such)

-- {{{ Rules
awful.rules.rules = {

    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons, 
                      size_hints_honor = false
                     } },
    { rule = { class = "Chromium" },  properties = {tag = tags[1][1]}},
    { rule = { class = "luakit" },  properties = {tag = tags[1][1]}},
    { rule = { class = "Geany" },  properties = {tag = tags[1][2]}, maximized_vertical = true, maximized_horizontal = true},
    { rule = { class = "libreoffice-writer" },  properties = {tag = tags[1][2]}},
    { rule = { class = "Vlc" },  properties = {tag = tags[1][3]}},
    { rule = { class = "Desmume" },  properties = {tag = tags[1][3]}},
    { rule = { class = "Easytag" },  properties = {tag = tags[1][3]}},
    { rule = { class = "Pcsx" },  properties = {tag = tags[1][3]}},
    { rule = { class = "Gpartedbin" },  properties = {tag = tags[1][4]}},
    { rule = { class = "Gtg" },  properties = {tag = tags[1][4]}},
    { rule = { class = "Pcmanfm" },  properties = {tag = tags[1][4]}, },
    { rule = { class = "Transmission" },  properties = {tag = tags[1][4]}, callback = awful.client.setslave},
    { rule = { class = "Tomboy" },  properties = {}, callback = awful.client.setslave},
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })
    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Center new windows on the screen66
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.center_horizontal(c)
            awful.placement.center_vertical(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Naughty settings


-- disable startup-notification globally
local oldspawn = awful.util.spawn
awful.util.spawn = function (s)
  oldspawn(s, false)
end
